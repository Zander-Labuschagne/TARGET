include "target.tmh"

int flap_setting = 0;
int flight_mode = 1;

int main()
{
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&JoystickF18, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&T16000L, MODE_EXCLUDED);
	Configure(&LMFD, MODE_EXCLUDED);
	Configure(&RMFD, MODE_EXCLUDED);
	Configure(&TFRPRudder, MODE_EXCLUDED);
	Configure(&TWCSThrottle, MODE_EXCLUDED);
	Configure(&TFRPHARudder, MODE_EXCLUDED);
	if (Init(&EventHandle)) 
		return 1;
		
	SetKBRate(32, 50);
	SetKBLayout(KB_ENG);
	ActKey(KEYON + PULSE + LED(&Throttle, LED_INTENSITY, 0));

	//Stick
		SetShiftButton(&Joystick, S4, &Throttle, PSF, PSB);
		MapKeyUMD(&Joystick, S4, L_ALT + 'r', L_CTL + 'w', 'w'); //Wheel Brakes [Ground Mode] | Tanks JETT | Weapons JETT
		SetShiftButton(&Joystick, S3, &Throttle, PSF, PSB);
		MapKeyUMD(&Joystick, S3, R_SHIFT + 'o', R_SHIFT + 'o', L_ALT + 'q'); // 
		MapKey(&Joystick, S2, R_ALT + SPC); //Weapon RELEASE
		int flt_mode_gun = EXEC("set_flight_mode(8);");
		MapKey(&Joystick, S1, flt_mode_gun); //GUN Mode
		MapKey(&Joystick, TG2, SPC); //WEAPON FIRE
		//CMS Air-to-Air Flight Modes
			int flt_mode_bvr = EXEC("set_flight_mode(2);");
			MapKey(&Joystick, H4U, flt_mode_bvr); //BVR Mode
			int flt_mode_vs = EXEC("set_flight_mode(3);");
			MapKey(&Joystick, H4D, flt_mode_vs); //Vertical Scan Mode
			int flt_mode_bore = EXEC("set_flight_mode(4);");
			MapKey(&Joystick, H4R, flt_mode_bore); //Boresight Mode
			int flt_mode_long = EXEC("set_flight_mode(6);");
			MapKey(&Joystick, H4L, flt_mode_long); //Longitudinal Scan Mode
			MapKey(&Joystick, H4P, 'd'); //Cycle Weapons
		// TMS (Flight Modes)
			int flt_submode_tms_l = EXEC("set_flight_submode_tms(1);");
			MapKey(&Joystick, H2L, flt_submode_tms_l);
			int flt_submode_tms_r = EXEC("set_flight_submode_tms(0);");
			MapKey(&Joystick, H2R, flt_submode_tms_r);
			int flt_submode_dms_l = EXEC("set_flight_submode_dms(1);");
			MapKey(&Joystick, H3L, flt_submode_dms_l);
			int flt_submode_dms_r = EXEC("set_flight_submode_dms(0);");
			MapKey(&Joystick, H3R, flt_submode_dms_r);
			int flt_mode_nav = EXEC("set_flight_mode(1);");
			MapKey(&Joystick, H2U, flt_mode_nav); // Navigation Mode
		// DMS
			MapKey(&Joystick, H3D, '='); // Decrease Radar Range
			MapKey(&Joystick, H3U, '-'); // Increase Radar Range
		// Trim HAT
			MapKey(&Joystick, H1U, R_CTL + ';'); //Trim Nose Down
			MapKey(&Joystick, H1D, R_CTL + '.'); //Trim Nose Up
			MapKey(&Joystick, H1L, R_CTL + ','); //Trim Left Wing Down
			MapKey(&Joystick, H1R, R_CTL + '/'); //Trim Right Wing Down

	// LASTE PANEL
		// ECM
			MapKey(&Throttle, EACON, CHAIN(PULSE + 'e', D(), PULSE + L_SHIFT + 'e')); //ECM ON and IR Jammer ON
			MapKey(&Throttle, EACOFF, CHAIN(PULSE + 'e', D(), PULSE + L_SHIFT + 'e')); //ECM OFF and IR Jammer OFF
		// Autopilot
			int autopilot = EXEC("ap_ON();");
			MapKey(&Throttle, APENG, autopilot); //Autopilot ENGAGE/DISENGAGE
			SetShiftButton(&Joystick, LTB, &Throttle, PSF, PSB);
			MapKeyUMD(&Throttle, LTB, L_ALT + 9, 'd', 'd'); //Cycle Weapons
	
	//ENGINE PANEL
		// APU
			MapKey(&Throttle, APUON, CHAIN(PULSE + R_SHIFT + 'l', LED(&Throttle, LED_INTENSITY, 255))); //Electric Power Switch ON
			MapKey(&Throttle, APUOFF, CHAIN(PULSE + R_SHIFT + 'l', LED(&Throttle, LED_INTENSITY, 0))); //Electric Power Switch OFF
		// ENG OPER
			MapKey(&Throttle, EOLIGN, R_ALT + HOME); //Left Engine IGN START
			MapKey(&Throttle, EOLMOTOR, PULSE + R_ALT + END); //Left Engine SHUTDOWN
			MapKey(&Throttle, IDLELON, PULSE + R_ALT + END); //Left Engine CUT THROTTLE
			MapKey(&Throttle, EORIGN, R_CTL + HOME); //Right Engine IGN START
			MapKey(&Throttle, EORMOTOR, PULSE + R_CTL + END); //Right Engine SHUTDOWN
			MapKey(&Throttle, IDLERON, PULSE + R_CTL + END); //Right Engine CUT THROTTLE
		// ENG FUEL
			MapKey(&Throttle, EFLNORM, PULSE + 'i'); //Radar ON
			MapKey(&Throttle, EFLOVER, PULSE + 'i'); //Radar OFF
			
			//MapKey(&Throttle, EFRNORM, PULSE + 'o'); //EO ON
			//MapKey(&Throttle, EFROVER, PULSE + 'o'); //EO OFF
	// FLAPS
		int flaps_u = EXEC("flaps_UP();");
		int flaps_m = EXEC("flaps_MD();");
		int flaps_d = EXEC("flaps_DN();");
		MapKey(&Throttle, FLAPU, flaps_u); //Flaps UP
		MapKey(&Throttle, FLAPM, flaps_m); //Flaps T/O
		MapKey(&Throttle, FLAPD, flaps_d); //Flaps LANDING
		MapKey(&Throttle, LDGH, R_SHIFT + 'n'); //Audible Warning Reset
	
	// THROTTLES
		MapKey(&Throttle, SPDB, PULSE + L_SHIFT + 'b'); //Airbrake EXT
		MapKey(&Throttle, SPDF, PULSE + L_CTL + 'b'); //Airbrake RET
		// Mic Switch functions as view HAT switch
		MapKey(&Throttle, MSD, KP6); //Look Right
		MapKey(&Throttle, MSU, KP4); //Look Left
		MapKey(&Throttle, MSL, KP2); //Look Down
		MapKey(&Throttle, MSR, KP8); //Look Up
		SetShiftButton(&Throttle, MSP, &Throttle, PSF, PSB);
		MapKeyUMD(&Throttle, MSP, L_CTL + 't', KP5, KP5); //View Center | Trim Center*/
			
		// CMS
			MapKey(&Throttle, CHF, DEL); //Dispense Flares
			MapKey(&Throttle, CHB, INS); //Dispense Chaff
		// TDC
			MapKey(&Throttle, SC, PULSE + ENT);
			


	//Axis
	MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Joystick, JOYX, 0, 0, 0, 0, 0);
	MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	RotateDXAxis(DX_X_AXIS, DX_Y_AXIS, -30);
	SetSCurve(&Joystick, JOYY, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, SCX, 0, 5, 0, 0, -3);
	MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
	SetSCurve(&Throttle, SCY, 0, 5, 0, 0, -3);
	SetJCurve(&Throttle, THR_RIGHT, 50, 50);
	MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetJCurve(&Throttle, THR_LEFT, 50, 50);
	MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_FC, 0, 0, 0, 0, 0);

}

int ap_ON()
{
	if (Throttle[APPAT])
		ActKey(KEYON + PULSE + L_ALT + '1'); // Attitude Hold
	else if (Throttle[APALT])
		ActKey(KEYON + PULSE + L_ALT + '2'); // Altitude Hold
	else if (Throttle[APAH])
		ActKey(KEYON + PULSE + L_ALT + '9');
}

int flaps_UP()
{
		ActKey(KEYON + PULSE + L_CTL + 'f');
		flap_setting = 0;
}

int flaps_MD()
{
	if (flap_setting == 0)
		ActKey(KEYON + PULSE + 'f');
	else
		ActKey(KEYON + PULSE + L_CTL + 'f');
	flap_setting = 1;
}

int flaps_DN()
{
	ActKey(KEYON + PULSE + L_SHIFT + 'f');
	flap_setting = 2;
}

int set_flight_mode(int flt_mode)
{
	if (flt_mode == 1) {
		ActKey(KEYON + PULSE + '1');
		flight_mode  = 1;
	} else if (flt_mode == 7) {
		ActKey(KEYON + PULSE + '7');
		flight_mode  = 7;
	} else if (flt_mode == 8) { // Gun
		ActKey(KEYON + PULSE + 'c');
	} else if (flt_mode == 2) {
		ActKey(KEYON + PULSE + '2');
		flight_mode = 2;
	} else if (flt_mode == 3) {
		ActKey(KEYON + PULSE + '3');
		flight_mode = 3;
	} else if (flt_mode == 4) {
		ActKey(KEYON + PULSE + '4');
		flight_mode = 4;
	} else if (flt_mode == 6) {
		ActKey(KEYON + PULSE + '6');
		flight_mode = 6;
	}
}

int set_flight_submode_dms(int left)
{
	if (left)
		ActKey(KEYON + PULSE + L_SHIFT + '`'); //Next Waypoint
	else
		ActKey(KEYON + PULSE + L_CTL + '`'); //Previous Waypoint		
}

int EventHandle(int type, alias o, int x)
{
	DefaultMapping(&o, x);
}